let currentTab = 0; // Current tab is set to be the first tab (0)
showTab(currentTab); // Display the current tab
$("#table_id").hide(); // Hides the extra member DataTable by default

function showTab(n) {
  // This function will display the specified tab of the form ...
  var x = document.getElementsByClassName("tab");
  const checkoutPhoneCall = document.querySelector("#checkoutPhoneCall");
  const checkoutVisit = document.querySelector("#checkoutVisit");
  x[n].style.display = "block";

  // ... handle the 'autofocus' state of the first input field on the 2 first tabs (not needed after)
  if (n == 0) {
    document.querySelector("#inputFirstName").focus();
  } else if (n == 1) {
    document.querySelector("#inputAddress1").focus();
  }

  if (n == 4 && checkoutPhoneCall.checked == false && checkoutVisit.checked == false) { // disable the 'next' button if no option is selected at checkout
    document.getElementById("nextBtn").setAttribute("disabled", "true");
  } else if (n != 4 && checkoutPhoneCall.checked == false && checkoutVisit.checked == false) {
    document.getElementById("nextBtn").removeAttribute("disabled");
  }
  // ... and fix the Previous/Next buttons:
  if (n == 0) {
    document.getElementById("prevBtn").style.display = "none";
  } else {
    document.getElementById("prevBtn").style.display = "inline";
  }
  if (n == (x.length - 1)) {
    document.getElementById("nextBtn").innerHTML = "Submit";
    reviewBeforeSubmit();
  } else {
    document.getElementById("nextBtn").innerHTML = "Next";
  }
  // ... and run a function that displays the correct step indicator:
  fixStepIndicator(n)
}

function nextPrev(n) {
  // This function will figure out which tab to display
  var x = document.getElementsByClassName("tab");
  // Exit the function if any field in the current tab is invalid:
  if (n == 1 && !validateForm()) return false;
  // Hide the current tab:
  x[currentTab].style.display = "none";
  // Increase or decrease the current tab by 1:
  currentTab = currentTab + n;
  // if you have reached the end of the form... :
  if (currentTab >= x.length) {
    //...the form gets submitted:
    document.getElementById("garda-registration-form").submit();
    return false;
  }
  // Otherwise, display the correct tab:
  showTab(currentTab);
}

function validateForm() {
  // This function deals with validation of the form fields
  let x, y, i, valid = true;
  x = document.getElementsByClassName("tab");
  y = x[currentTab].getElementsByTagName("input");
  // A loop that checks every input field in the current tab:
  for (i = 0; i < y.length; i++) {
    // If a field is empty...
    if (y[i].value == "" && y[i].hasAttribute("required")) {
      // add an "invalid" class to the field:
      y[i].classList.add("invalid");
      // and set the current valid status to false:
      valid = false;
    }
  }
  // If the valid status is true, mark the step as finished and valid:
  if (valid) {
    document.getElementsByClassName("step")[currentTab].classList.add("finish");
  }
  return valid; // return the valid status
}

function fixStepIndicator(n) {
  // This function removes the "active" class of all steps...
  var i, x = document.getElementsByClassName("step");
  for (i = 0; i < x.length; i++) {
    x[i].className = x[i].className.replace(" active", "");
  }
  //... and adds the "active" class to the current step:
  x[n].classList.add("active");
}

// Checkers

function checkFirstName(field) {
  const firstName = field.value;
  const firstNamePatt = new RegExp("[A-Za-z]{2,}")
  if (!firstNamePatt.test(firstName)) {
    field.classList.add('invalid');
    document.querySelector("#firstNameErrorMessage").style.display = "inline";
  } else {
    field.classList.add('valid');
    document.querySelector("#firstNameErrorMessage").style.display = "none";
  }
}

function checkLastName(field) {
  const lastName = field.value;
  const lastNamePatt = new RegExp("[A-Za-z]{2,}")
  if (!lastNamePatt.test(lastName)) {
    field.classList.add('invalid');
    document.querySelector("#lastNameErrorMessage").style.display = "inline";
  } else {
    field.classList.add('valid');
    document.querySelector("#lastNameErrorMessage").style.display = "none";
  }
}

function checkPolicy(field) {
  const policy = field.value;
  const policyPatt = new RegExp("[0-9]{5}[A-Za-z]$")
  if (!policyPatt.test(policy)) {
    field.classList.add('invalid');
    document.querySelector("#policyErrorMessage").style.display = "inline";
  } else {
    field.classList.add('valid');
    document.querySelector("#policyErrorMessage").style.display = "none";
  }
}

function validateAge(dateOfBirth) {
  const birthday = +new Date(dateOfBirth);
  const currentDate = new Date().toJSON().slice(0, 10) + ' 01:00:00';
  const age = ~~((Date.now(currentDate) - birthday) / (31557600000));
}

function checkAddress(field) {
  const address = field.value;
  const addressPatt = new RegExp("[0-9A-Za-z\s]{2,}");
  if (!addressPatt.test(address)) {
    field.classList.add('invalid');
    document.querySelector("#addressErrorMessage").style.display = "inline";
  } else {
    field.classList.add('valid');
    document.querySelector("#addressErrorMessage").style.display = "none";
  }
}

function checkCity(field) {
  const city = field.value;
  const cityPatt = new RegExp("[A-Za-z\s]{1,}");
  if (!cityPatt.test(city)) {
    field.classList.add('invalid');
    document.querySelector("#cityErrorMessage").style.display = "inline";
  } else {
    field.classList.add('valid');
    document.querySelector("#cityErrorMessage").style.display = "none";
  }
}

function checkEmail(field) {
  const email = field.value;
  const emailPatt = new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?");
  if (!emailPatt.test(email)) {
    field.classList.add('invalid');
    document.querySelector("#emailErrorMessage").style.display = "inline";
  } else {
    field.classList.add('valid');
    document.querySelector("#emailErrorMessage").style.display = "none";
  }
}

function checkEmailMatch(field) {
  const email = document.querySelector("#inputEmail").value;
  if (field.value === email) {
    field.classList.add('valid');
    document.querySelector("#confEmailErrorMessage").style.display = "none";
  } else {
    field.classList.add('invalid');
    document.querySelector("#confEmailErrorMessage").style.display = "inline";
  }
}

function checkPwd(field) {
  const pwdPatt = /(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}/gm;
  if (!pwdPatt.test(field.value)) {
    field.classList.add('invalid');
    document.querySelector("#pwdErrorMessage").style.display = "inline";
  } else {
    field.classList.add('valid');
    document.querySelector("#pwdErrorMessage").style.display = "none";
  }
}

function checkPwdMatch(field) {
  const confirmedPwd = field.value;
  const pwd = document.querySelector("#inputPassword").value;
  if (confirmedPwd === pwd) {
    field.classList.add('valid');
    document.querySelector("#confPwdErrorMessage").style.display = "none";
  } else {
    field.classList.add('invalid');
    document.querySelector("#confPwdErrorMessage").style.display = "inline";
  }
}

function validateCheckoutOption() {
  document.getElementById("nextBtn").removeAttribute("disabled");
}

function showCardForm() {
  document.querySelector("#card-form").style.display = "block";
}

function hideCardForm() {
  document.querySelector("#card-form").style.display = "none";
}

function reviewBeforeSubmit() {
  const providedFirstName = document.querySelector("#inputFirstName").value.trim();
  const providedLastname = document.querySelector("#inputLastName").value.trim();
  const providedPolicy = document.querySelector("#inputPolicy").value.trim();
  const providedDOB = document.querySelector("#inputDOB").value.trim();
  // const providedAddress = document.querySelector("#inputAddress1").value.trim() + ", " + document.querySelector("#inputCity").value.trim() + ", " + document.querySelector("#inputCounty").value.trim();
  const reviewTable = $("#reviewChange-table").DataTable();
  const row = [
    providedFirstName,
    providedLastname,
    providedPolicy,
    providedDOB
  ];
  reviewTable.row.add(row).draw(false);
}

function scrollToView() {
  window.scrollBy(0,227);
}