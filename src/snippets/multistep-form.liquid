<script>

window.addEventlistener('load', function () {

  var currentTab = 0; // Current tab is set to be the first tab (0)
  showTab(currentTab); // Display the current tab

  function showTab(n) {
    // This function will display the specified tab of the form ...
    var x = document.getElementsByClassName("tab");
    x[n].style.display = "block";
    // ... and fix the Previous/Next buttons:
    if (n == 0) {
      document.getElementById("prevBtn").style.display = "none";
    } else {
      document.getElementById("prevBtn").style.display = "inline";
    }
    if (n == (x.length - 2)) {
      document.getElementById("nextBtn").innerHTML = "Submit";
    } else {
      document.getElementById("nextBtn").innerHTML = "Next";
    }
    // ... and run a function that displays the correct step indicator:
    fixStepIndicator(n)
  }

  function nextPrev(n) {
    // This function will figure out which tab to display
    var x = document.getElementsByClassName("tab");
    // Exit the function if any field in the current tab is invalid:
    if (n == 1 && !validateForm()) return false;
    // Hide the current tab:
    x[currentTab].style.display = "none";
    // Increase or decrease the current tab by 1:
    currentTab = currentTab + n;
    // if you have reached the end of the form... :
    if (currentTab >= x.length) {
      //...the form gets submitted:
      document.getElementById("garda-registration-form").submit();
      return false;
    }
    // Otherwise, display the correct tab:
    showTab(currentTab);
  }

  function validateForm() {
    // This function deals with validation of the form fields
    var x, y, i, valid = true;
    x = document.getElementsByClassName("tab");
    y = x[currentTab].getElementsByTagName("input");
    // A loop that checks every input field in the current tab:
    for (i = 0; i < y.length; i++) {
      // If a field is empty...
      if (y[i].value == "" && y[i].hasAttribute("required")) {
        // add an "invalid" class to the field:
        y[i].className += " invalid";
        // and set the current valid status to false:
        valid = false;
      }
    }
    // If the valid status is true, mark the step as finished and valid:
    if (valid) {
      document.getElementsByClassName("step")[currentTab].className += " finish";
    }
    return valid; // return the valid status
  }

  function fixStepIndicator(n) {
    // This function removes the "active" class of all steps...
    var i, x = document.getElementsByClassName("step");
    for (i = 0; i < x.length; i++) {
      x[i].className = x[i].className.replace(" active", "");
    }
    //... and adds the "active" class to the current step:
    x[n].className += " active";
  }

  // Checkers

  function checkFirstName(field) {
    const firstName = field.value;
    const firstNamePatt = new RegExp("[A-Za-z]{2,}")
    if (!firstNamePatt.test(firstName)) {
      field.classList.add('invalid');
      document.querySelector("#firstNameErrorMessage").style.display = "inline";
    } else {
      field.classList.add('valid');
      document.querySelector("#firstNameErrorMessage").style.display = "none";
    }
  }

  function checkLastName(field) {
    const lastName = field.value;
    const lastNamePatt = new RegExp("[A-Za-z]{2,}")
    if (!lastNamePatt.test(lastName)) {
      field.classList.add('invalid');
      document.querySelector("#lastNameErrorMessage").style.display = "inline";
    } else {
      field.classList.add('valid');
      document.querySelector("#lastNameErrorMessage").style.display = "none";
    }
  }

  function checkPolicy(field) {
    const policy = field.value;
    const policyPatt = new RegExp("[0-9]{5}[A-Za-z]$")
    if (!policyPatt.test(policy)) {
      field.classList.add('invalid');
      document.querySelector("#policyErrorMessage").style.display = "inline";
    } else {
      field.classList.add('valid');
      document.querySelector("#policyErrorMessage").style.display = "none";
    }
  }

  function checkDate(field) {
    console.log(field.value)
  }

  function validateAge(dateOfBirth) {
    const birthday = +new Date(dateOfBirth);
    const currentDate = new Date().toJSON().slice(0, 10) + ' 01:00:00';
    const age = ~~((Date.now(currentDate) - birthday) / (31557600000));
    console.log(age);
  }

  function checkAddress(field) {
    const address = field.value;
    const addressPatt = new RegExp("[0-9A-Za-z\s]{2,}");
    if (!addressPatt.test(address)) {
      field.classList.add('invalid');
      document.querySelector("#addressErrorMessage").style.display = "inline";
    } else {
      field.classList.add('valid');
      document.querySelector("#addressErrorMessage").style.display = "none";
    }
  }

  function checkCity(field) {
    const city = field.value;
    const cityPatt = new RegExp("[A-Za-z\s]{1,}");
    if (!cityPatt.test(city)) {
      field.classList.add('invalid');
      document.querySelector("#cityErrorMessage").style.display = "inline";
    } else {
      field.classList.add('valid');
      document.querySelector("#cityErrorMessage").style.display = "none";
    }
  }

  function checkEmail(field) {
    const email = field.value;
    const emailPatt = new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?");
    if (!emailPatt.test(email)) {
      field.classList.add('invalid');
      document.querySelector("#emailErrorMessage").style.display = "inline";
    } else {
      field.classList.add('valid');
      document.querySelector("#emailErrorMessage").style.display = "none";
    }
  }

  function checkEmailMatch(field) {
    const email = document.querySelector("#inputEmail").value;
    if (field.value === email) {
      field.classList.add('valid');
      document.querySelector("#confEmailErrorMessage").style.display = "none";
    } else {
      field.classList.add('invalid');
      document.querySelector("#confEmailErrorMessage").style.display = "inline";
    }
  }

  function checkPwd(field) {
    const pwdPatt = /(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}/gm;
    if (!pwdPatt.test(field.value)) {
      field.classList.add('invalid');
      document.querySelector("#pwdErrorMessage").style.display = "inline";
    } else {
      field.classList.add('valid');
      document.querySelector("#pwdErrorMessage").style.display = "none";
    }
  }

  function checkPwdMatch(field) {
    const confirmedPwd = field.value;
    const pwd = document.querySelector("#inputPassword").value;
    if (confirmedPwd === pwd) {
      field.classList.add('valid');
      document.querySelector("#confPwdErrorMessage").style.display = "none";
    } else {
      field.classList.add('invalid');
      document.querySelector("#confPwdErrorMessage").style.display = "inline";
    }
  }

  // MEMBER PAGE

  const memberInputForms = document.querySelector(".memberInputForms");
  const addMemberButton = document.querySelector("button.addMemberButton");
  const removeMemberButton = document.querySelector("button.removeMemberButton");
  let extraMembers = 1;

  addMemberButton.addEventListener("click", e => {
    e.preventDefault();
    extraMembers += 1;
    const newMemberForm = document.createElement("LI");
    const newMemberTitle = document.createElement("P");
    const newMemberTitleText = document.createTextNode(
      "Extra member " + extraMembers
    );
    newMemberTitle.appendChild(newMemberTitleText);
    const fnContainer = document.createElement("P");
    const lnContainer = document.createElement("P");
    const dobContainer = document.createElement("P");
    const newFirstNameInput = document.createElement("INPUT");
    const newLastNameInput = document.createElement("INPUT");
    const newDateOfBirthInput = document.createElement("INPUT");
    newFirstNameInput.classList.add("form-control");
    newLastNameInput.classList.add("form-control");
    newDateOfBirthInput.classList.add("form-control");
    newFirstNameInput.setAttribute("placeholder", "First name...");
    newLastNameInput.setAttribute("placeholder", "Last name...");
    newDateOfBirthInput.setAttribute("placeholder", "Date of birth...");
    fnContainer.appendChild(newFirstNameInput);
    lnContainer.appendChild(newLastNameInput);
    dobContainer.appendChild(newDateOfBirthInput);
    newMemberForm.appendChild(newMemberTitle);
    newMemberForm.appendChild(fnContainer);
    newMemberForm.appendChild(lnContainer);
    newMemberForm.appendChild(dobContainer);
    memberInputForms.appendChild(newMemberForm);
    if (memberInputForms.children.length > 5) {
      addMemberButton.style.display = "none";
    }
    if (extraMembers > 1) {
      removeMemberButton.style.display = "inline";
    }
    if (extraMembers < 2) {
      removeMemberButton.style.display = "none";
    }
  });

  removeMemberButton.addEventListener("click", () => {
    if (extraMembers > 1) {
      extraMembers -= 1;
    }
    if (extraMembers > 1) {
      removeMemberButton.style.display = "inline";
    }
    if (extraMembers < 2) {
      removeMemberButton.style.display = "none";
    }
    if (extraMembers < 5) {
      addMemberButton.style.display = "inline";
    }
    $(".memberInputForms li:last").remove();
  });
});

</script>